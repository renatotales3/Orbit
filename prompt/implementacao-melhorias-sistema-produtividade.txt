# IMPLEMENTA√á√ÉO COMPLETA DE MELHORIAS NO SISTEMA DE PRODUTIVIDADE

## CONTEXTO
Voc√™ √© um desenvolvedor especializado em JavaScript, CSS e HTML. Precisa implementar v√°rias melhorias em um sistema de produtividade pessoal, mantendo 100% da funcionalidade existente e seguindo exatamente as especifica√ß√µes fornecidas.

## TAREFAS A IMPLEMENTAR

### 1. üß† SISTEMA INTELIGENTE DE SONO

#### 1.1 Score Inteligente (0-100)
- Implementar c√°lculo baseado em m√∫ltiplos fatores:
  - Tempo de sono: 7-9h = pontua√ß√£o m√°xima, <6h ou >10h = penaliza√ß√£o
  - Hora de dormir: antes das 23h = b√¥nus, ap√≥s 1h = penaliza√ß√£o
  - Qualidade do sono: 1-5 (peso 20%)
  - Respostas √†s 5 perguntas inteligentes (peso 60%)

#### 1.2 5 Perguntas Inteligentes
Criar modal com as seguintes perguntas e op√ß√µes:

1. **"Como voc√™ se sentiu ao acordar?"**
   - Energizado (4 pontos)
   - Normal (3 pontos)
   - Cansado (2 pontos)
   - Muito cansado (1 ponto)

2. **"Teve dificuldade para dormir?"**
   - Nenhuma (4 pontos)
   - Pouca (3 pontos)
   - Moderada (2 pontos)
   - Muita (1 ponto)

3. **"Acordou durante a noite?"**
   - N√£o (4 pontos)
   - 1 vez (3 pontos)
   - 2-3 vezes (2 pontos)
   - Mais de 3 vezes (1 ponto)

4. **"Usou dispositivos eletr√¥nicos antes de dormir?"**
   - N√£o (4 pontos)
   - Pouco (3 pontos)
   - Moderado (2 pontos)
   - Muito (1 ponto)

5. **"Praticou alguma atividade relaxante?"**
   - Sim (4 pontos)
   - Medita√ß√£o (4 pontos)
   - Leitura (3 pontos)
   - Nenhuma (1 ponto)

#### 1.3 Interface Visual
- Score exibido **ACIMA** da barra de progresso (n√£o centralizado)
- Barra de progresso com cores din√¢micas:
  - 0-30: Vermelho (#DC3545)
  - 31-60: Laranja (#FD7E14)
  - 61-80: Amarelo (#FFC107)
  - 81-100: Verde (#28A745)
- Feedbacks personalizados baseados na pontua√ß√£o
- Sugest√µes espec√≠ficas para melhorar o sono

#### 1.4 Integra√ß√£o
- Score salvo no hist√≥rico di√°rio
- Inclu√≠do no resumo semanal
- Modal seguindo padr√£o do design (modal-backdrop)

### 2. üé® HOVER PREENCHIDO NAS CATEGORIAS DAS METAS

#### 2.1 Implementa√ß√£o CSS
```css
.category-btn:hover {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}
```

#### 2.2 Comportamento
- Ao passar o mouse: fundo preenchido com cor prim√°ria + texto branco
- N√£o apenas bordas, mas preenchimento completo
- Transi√ß√£o suave de 0.3s

### 3. ‚è∞ FUNCIONALIDADES NOVAS DO POMODORO

#### 3.1 Persist√™ncia do Timer
- Salvar estado do timer no localStorage
- Continuar do tempo exato ao recarregar a p√°gina
- Funcionar com timer pausado ou ativo
- Eliminar "picotagem" do tempo

#### 3.2 Implementa√ß√£o
```javascript
// Salvar estado
const saveTimerState = () => {
    const state = {
        totalSeconds,
        currentCycle,
        isPaused,
        wasActive: !isPaused,
        timestamp: Date.now()
    };
    localStorage.setItem('pomodoroState', JSON.stringify(state));
};

// Restaurar estado
const restoreTimerState = () => {
    const saved = localStorage.getItem('pomodoroState');
    if (saved) {
        const state = JSON.parse(saved);
        const timeDiff = Math.floor((Date.now() - state.timestamp) / 1000);
        
        if (state.wasActive) {
            totalSeconds = Math.max(0, state.totalSeconds - timeDiff);
        } else {
            totalSeconds = state.totalSeconds;
        }
        
        currentCycle = state.currentCycle;
        isPaused = !state.wasActive;
        updateDisplay();
    }
};
```

### 4. ‚úÖ √çCONES DE CHECKMARK DAS BOLINHAS

#### 4.1 Implementa√ß√£o
- **Tarefas n√£o conclu√≠das:** `bx-circle` (bolinha vazia)
- **Tarefas conclu√≠das:** `bxs-check-circle` (bolinha com checkmark verde)

#### 4.2 CSS
```css
.bx-circle {
    color: var(--text-color);
}

.bxs-check-circle {
    color: #28A745;
}

.complete-task-btn.completed .bx-circle {
    display: none;
}

.complete-task-btn.completed .bxs-check-circle {
    display: inline-block;
}
```

#### 4.3 Aplica√ß√£o
- Tarefas do dia
- Subtarefas das metas
- Qualquer lista de tarefas

### 5. üåà GRADIENTE NAS BARRAS DE PROGRESSO

#### 5.1 Implementa√ß√£o CSS
```css
/* Modo claro */
:root[data-theme="light"] .progress-bar {
    background: linear-gradient(90deg, var(--primary-color) 0%, var(--primary-color) 100%);
}

/* Modo escuro */
:root[data-theme="dark"] .progress-bar {
    background: linear-gradient(90deg, #FF69B4 0%, #FFB6C1 100%);
}
```

#### 5.2 Aplica√ß√£o
- Barras de progresso das metas
- Barra de progresso do sono
- Qualquer barra de progresso do sistema

### 6. üìè CARD DE TAREFA SE EXPANDIR AUTOMATICAMENTE

#### 6.1 Implementa√ß√£o CSS
```css
.task-text {
    word-wrap: break-word;
    white-space: normal;
    line-height: 1.4;
    min-height: 1.2em;
}

.task-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    transition: all 0.3s ease;
}
```

#### 6.2 Comportamento
- Texto quebra automaticamente para segunda linha
- Card aumenta verticalmente conforme necess√°rio
- Transi√ß√£o suave

### 7. üéØ CENTRALIZA√á√ÉO VERTICAL

#### 7.1 Implementa√ß√£o CSS
```css
.task-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.complete-task-btn,
.task-priority {
    display: flex;
    align-items: center;
    justify-content: center;
}
```

#### 7.2 Aplica√ß√£o
- Checkmark sempre centralizado verticalmente
- Tag de prioridade sempre centralizada
- √çcones sempre alinhados

### 8. üéØ SISTEMA DE PRIORIDADES MELHORADO

#### 8.1 Modal de Prioridades para Subtarefas
- Ao clicar em "Adicionar ao Foco" em uma subtarefa
- Abrir modal com op√ß√µes de prioridade
- Integrar com sistema de tarefas existente

#### 8.2 Implementa√ß√£o
```javascript
// Abrir modal de prioridade
const openPriorityModal = (subtaskData) => {
    document.body.classList.add('modal-open');
    priorityModal.classList.remove('hidden');
    subtaskToAdd = subtaskData;
};

// Processar sele√ß√£o de prioridade
const processPrioritySelection = (priority) => {
    if (subtaskToAdd) {
        Tasks.add({
            text: `[${subtaskToAdd.goalTitle}] ${subtaskToAdd.subtaskText}`,
            priority: priority,
            goalId: subtaskToAdd.goalId,
            subtaskId: subtaskToAdd.subtaskId
        });
        closePriorityModal();
    }
};
```

### 9. üöÄ NOVO NOME E LEMA

#### 9.1 Atualiza√ß√µes no HTML
```html
<title>Orbit</title>
<meta name="description" content="Tudo gira em torno de voc√™.">
```

#### 9.2 Manifest.json
```json
{
    "name": "Orbit",
    "short_name": "Orbit",
    "description": "Tudo gira em torno de voc√™."
}
```

#### 9.3 Meta Tags
```html
<meta property="og:title" content="Orbit - Sua vida, em √≥rbita">
<meta property="og:description" content="Tudo gira em torno de voc√™.">
<meta name="twitter:title" content="Orbit - Sua vida, em √≥rbita">
<meta name="twitter:description" content="Tudo gira em torno de voc√™.">
```

### 10. üì± T√çTULOS DIN√ÇMICOS

#### 10.1 Remover Contador do Pomodoro
```javascript
// Remover esta linha do updateDisplay do Pomodoro:
// document.title = `${timerDisplay.textContent} - Life OS`;

// Manter apenas:
document.title = "Orbit";
```

#### 10.2 Remover Vers√£o
- Eliminar qualquer refer√™ncia √† vers√£o no t√≠tulo
- Manter t√≠tulo limpo: "Orbit"

## REGRAS IMPORTANTES

### ‚úÖ OBRIGAT√ìRIO
1. **N√ÉO quebrar funcionalidades existentes**
2. **Manter 100% da compatibilidade**
3. **Seguir exatamente as especifica√ß√µes**
4. **Testar cada funcionalidade ap√≥s implementa√ß√£o**
5. **Manter o padr√£o de design existente**

### üîß IMPLEMENTA√á√ÉO
1. **Implementar uma funcionalidade por vez**
2. **Testar ap√≥s cada implementa√ß√£o**
3. **Manter c√≥digo limpo e comentado**
4. **Usar vari√°veis CSS existentes quando poss√≠vel**
5. **Seguir padr√µes de nomenclatura existentes**

### üì± RESPONSIVIDADE
1. **Garantir funcionamento em mobile**
2. **Manter interface touch-friendly**
3. **Preservar acessibilidade**
4. **Testar em diferentes tamanhos de tela**

### üé® DESIGN
1. **Manter consist√™ncia visual**
2. **Usar cores do tema existente**
3. **Preservar anima√ß√µes suaves**
4. **Manter hierarquia visual**

## ESTRUTURA DE ARQUIVOS

### Arquivos a modificar:
- `index.html` (meta tags, t√≠tulo)
- `script.js` (l√≥gica do sistema inteligente de sono, Pomodoro)
- `style.css` (estilos para hover, gradientes, checkmarks)
- `manifest.json` (nome e descri√ß√£o)

### M√≥dulos a criar/modificar:
- Sistema de sono inteligente (substituir sistema atual)
- Persist√™ncia do Pomodoro
- Sistema de prioridades melhorado

## TESTES OBRIGAT√ìRIOS

Ap√≥s cada implementa√ß√£o, testar:
1. ‚úÖ Sistema de sono inteligente funciona
2. ‚úÖ Hover nas categorias preenche completamente
3. ‚úÖ Pomodoro persiste ao recarregar
4. ‚úÖ Checkmarks aparecem corretamente
5. ‚úÖ Gradientes funcionam em ambos os temas
6. ‚úÖ Cards se expandem automaticamente
7. ‚úÖ Centraliza√ß√£o vertical funciona
8. ‚úÖ Modal de prioridades funciona
9. ‚úÖ Nome "Orbit" aparece corretamente
10. ‚úÖ T√≠tulo da aba √© "Orbit" (sem contador)

## ENTREGA

Implementar todas as funcionalidades seguindo exatamente estas especifica√ß√µes. Cada funcionalidade deve estar 100% funcional e integrada ao sistema existente. N√£o quebrar nenhuma funcionalidade atual.

## EXEMPLOS DE C√ìDIGO COMPLETO

### Sistema Inteligente de Sono - C√°lculo de Score
```javascript
const calculateSleepScore = (sleepData, answers) => {
    let score = 0;
    
    // Fator 1: Tempo de sono (30%)
    const sleepHours = sleepData.totalMinutes / 60;
    if (sleepHours >= 7 && sleepHours <= 9) {
        score += 30;
    } else if (sleepHours >= 6 && sleepHours <= 10) {
        score += 20;
    } else if (sleepHours >= 5 && sleepHours <= 11) {
        score += 10;
    }
    
    // Fator 2: Hora de dormir (10%)
    const bedHour = parseInt(sleepData.bedTime.split(':')[0]);
    if (bedHour <= 23) {
        score += 10;
    } else if (bedHour <= 1) {
        score += 5;
    }
    
    // Fator 3: Respostas das perguntas (60%)
    const questionScores = {
        'wake-feeling': { 'energized': 4, 'normal': 3, 'tired': 2, 'very-tired': 1 },
        'sleep-difficulty': { 'none': 4, 'little': 3, 'moderate': 2, 'much': 1 },
        'night-wake': { 'no': 4, 'once': 3, 'twice': 2, 'more': 1 },
        'electronics': { 'no': 4, 'little': 3, 'moderate': 2, 'much': 1 },
        'relaxing': { 'yes': 4, 'meditation': 4, 'reading': 3, 'none': 1 }
    };
    
    let questionScore = 0;
    Object.keys(answers).forEach(question => {
        const answer = answers[question];
        questionScore += questionScores[question][answer] || 0;
    });
    
    score += (questionScore / 20) * 60; // Normalizar para 60 pontos
    
    return Math.round(Math.min(100, Math.max(0, score)));
};
```

### CSS para Gradientes e Hover
```css
/* Gradientes nas barras de progresso */
:root[data-theme="light"] .progress-bar {
    background: linear-gradient(90deg, var(--primary-color) 0%, var(--primary-color) 100%) !important;
}

:root[data-theme="dark"] .progress-bar {
    background: linear-gradient(90deg, #FF69B4 0%, #FFB6C1 100%) !important;
}

/* Hover preenchido nas categorias */
.category-btn:hover {
    background-color: var(--primary-color) !important;
    color: white !important;
    border-color: var(--primary-color) !important;
}

/* Checkmarks das bolinhas */
.bx-circle {
    color: var(--text-color);
}

.bxs-check-circle {
    color: #28A745;
}

.complete-task-btn.completed .bx-circle {
    display: none;
}

.complete-task-btn.completed .bxs-check-circle {
    display: inline-block;
}

/* Cards expans√≠veis */
.task-text {
    word-wrap: break-word;
    white-space: normal;
    line-height: 1.4;
    min-height: 1.2em;
}

.task-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    transition: all 0.3s ease;
}
```

### Persist√™ncia do Pomodoro
```javascript
// Salvar estado do timer
const saveTimerState = () => {
    const state = {
        totalSeconds,
        currentCycle,
        isPaused,
        wasActive: !isPaused,
        timestamp: Date.now()
    };
    localStorage.setItem('pomodoroState', JSON.stringify(state));
};

// Restaurar estado do timer
const restoreTimerState = () => {
    const saved = localStorage.getItem('pomodoroState');
    if (saved) {
        const state = JSON.parse(saved);
        const timeDiff = Math.floor((Date.now() - state.timestamp) / 1000);
        
        if (state.wasActive) {
            totalSeconds = Math.max(0, state.totalSeconds - timeDiff);
        } else {
            totalSeconds = state.totalSeconds;
        }
        
        currentCycle = state.currentCycle;
        isPaused = !state.wasActive;
        updateDisplay();
    }
};

// Chamar no init e quando pausar/iniciar
document.addEventListener('DOMContentLoaded', restoreTimerState);
```

## NOTAS FINAIS

Este prompt cont√©m todas as especifica√ß√µes t√©cnicas necess√°rias para implementar exatamente as funcionalidades desenvolvidas. Seguir rigorosamente cada especifica√ß√£o para garantir que o resultado seja id√™ntico ao sistema original.